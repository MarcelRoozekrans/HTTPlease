using System;
using System.Net.Http;
using System.Threading.Tasks;
using Xunit;

namespace HTTPlease.Tests
{
	/// <summary>
	///		Assertion functionality for HTTP request / response message generated by <see cref="HttpRequest"/> / <see cref="HttpRequest{TContext}"/>.
	/// </summary>
	public static class MessageAssert
    {
		/// <summary>
		///		Assert that the request message's Accept header contains the specified media type.
		/// </summary>
		/// <param name="requestMessage">
		///		The <see cref="HttpRequestMessage"/>.
		/// </param>
		/// <param name="mediaType">
		///		The expected media type.
		/// </param>
		public static void AcceptsMediaType(HttpRequestMessage requestMessage, string mediaType)
		{
			if (requestMessage == null)
				throw new ArgumentNullException(nameof(requestMessage));

			if (String.IsNullOrWhiteSpace(mediaType))
				throw new ArgumentException("Argument cannot be null, empty, or composed entirely of whitespace: 'mediaType'.", nameof(mediaType));

			Assert.Contains(requestMessage.Headers.Accept,
				accept => accept.MediaType == mediaType
			);
		}

		/// <summary>
		///		Asynchronously assert that the request message body is equal to the specified string.
		/// </summary>
		/// <param name="requestMessage">
		///		The HTTP request message to examine.
		/// </param>
		/// <param name="expectedBody">
		///		A string containing the expected message body.
		/// </param>
		/// <returns>
		///		The actual message body.
		/// </returns>
		public static async Task<string> BodyIsAsync(HttpRequestMessage requestMessage, string expectedBody)
		{
			if (requestMessage == null)
				throw new ArgumentNullException(nameof(requestMessage));

			string actualBody = null;
			if (requestMessage.Content != null)
				actualBody = await requestMessage.Content.ReadAsStringAsync();

			Assert.Equal(expectedBody, actualBody);

			return actualBody;
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest"/>.
		/// </summary>
		/// <param name="request">
		///		The <see cref="HttpRequest"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static void Request(HttpRequest request, HttpMethod method, Action<HttpRequestMessage> assertion)
		{
			Request(request, method, null, null, assertion);
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest"/>.
		/// </summary>
		/// <param name="request">
		///		The <see cref="HttpRequest"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="bodyContent">
		///		<see cref="HttpContent"/> representing the request body content.
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static void Request(HttpRequest request, HttpMethod method, HttpContent bodyContent, Action<HttpRequestMessage> assertion)
		{
			Request(request, method, bodyContent, null, assertion);
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest"/>.
		/// </summary>
		/// <param name="request">
		///		The <see cref="HttpRequest"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="bodyContent">
		///		<see cref="HttpContent"/> representing the request body content.
		/// </param>
		/// <param name="baseUri">
		///		An optional base URI for the request.
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static void Request(HttpRequest request, HttpMethod method, HttpContent bodyContent, Uri baseUri, Action<HttpRequestMessage> assertion)
		{
			if (request == null)
				throw new ArgumentNullException(nameof(request));

			if (assertion == null)
				throw new ArgumentNullException(nameof(assertion));

			if (method == null)
				throw new ArgumentNullException(nameof(method));

			using (HttpRequestMessage requestMessage = request.BuildRequestMessage(method, bodyContent, baseUri))
			{
				assertion(requestMessage);
			}
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest"/>.
		/// </summary>
		/// <param name="request">
		///		The <see cref="HttpRequest"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="bodyContent">
		///		<see cref="HttpContent"/> representing the request body content.
		/// </param>
		/// <param name="baseUri">
		///		An optional base URI for the request.
		/// </param>
		/// <param name="asyncAssertion">
		///		An asynchronous delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static async Task RequestAsync(HttpRequest request, HttpMethod method, HttpContent bodyContent, Uri baseUri, Func<HttpRequestMessage, Task> asyncAssertion)
		{
			if (request == null)
				throw new ArgumentNullException(nameof(request));

			if (asyncAssertion == null)
				throw new ArgumentNullException(nameof(asyncAssertion));

			if (method == null)
				throw new ArgumentNullException(nameof(method));

			using (HttpRequestMessage requestMessage = request.BuildRequestMessage(method, bodyContent, baseUri))
			{
				await asyncAssertion(requestMessage);
			}
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest{TContext}"/>.
		/// </summary>
		/// <typeparam name="TContext">
		///		The type of object used as a context for resolving deferred parameters.
		/// </typeparam>
		/// <param name="request">
		///		The <see cref="HttpRequest{TContext}"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		/// <remarks>
		///		Uses the default value for <typeparamref name="TContext"/>.
		/// </remarks>
		public static void Request<TContext>(HttpRequest<TContext> request, HttpMethod method, Action<HttpRequestMessage> assertion)
		{
			Request(request, method,
				context: default(TContext),
				bodyContent: null,
				baseUri: null,
				assertion: assertion
			);
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest{TContext}"/>.
		/// </summary>
		/// <typeparam name="TContext">
		///		The type of object used as a context for resolving deferred parameters.
		/// </typeparam>
		/// <param name="request">
		///		The <see cref="HttpRequest{TContext}"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="context">
		///		The <typeparamref name="TContext"/> instance used as a context for resolving deferred values.
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static void Request<TContext>(HttpRequest<TContext> request, HttpMethod method, TContext context, Action<HttpRequestMessage> assertion)
		{
			Request(request, method, context,
				bodyContent: null,
				baseUri: null,
				assertion: assertion
			);
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest{TContext}"/>.
		/// </summary>
		/// <typeparam name="TContext">
		///		The type of object used as a context for resolving deferred parameters.
		/// </typeparam>
		/// <param name="request">
		///		The <see cref="HttpRequest{TContext}"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="context">
		///		The <typeparamref name="TContext"/> instance used as a context for resolving deferred values.
		/// </param>
		/// <param name="bodyContent">
		///		<see cref="HttpContent"/> representing the request body content.
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static void Request<TContext>(HttpRequest<TContext> request, HttpMethod method, TContext context, HttpContent bodyContent, Action<HttpRequestMessage> assertion)
		{
			Request(request, method, context, bodyContent,
				baseUri: null,
				assertion: assertion
			);
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest{TContext}"/>.
		/// </summary>
		/// <typeparam name="TContext">
		///		The type of object used as a context for resolving deferred parameters.
		/// </typeparam>
		/// <param name="request">
		///		The <see cref="HttpRequest{TContext}"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="context">
		///		The <typeparamref name="TContext"/> instance used as a context for resolving deferred values.
		/// </param>
		/// <param name="bodyContent">
		///		<see cref="HttpContent"/> representing the request body content.
		/// </param>
		/// <param name="baseUri">
		///		An optional base URI for the request.
		/// </param>
		/// <param name="assertion">
		///		A delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static void Request<TContext>(HttpRequest<TContext> request, HttpMethod method, TContext context, HttpContent bodyContent, Uri baseUri, Action<HttpRequestMessage> assertion)
		{
			if (request == null)
				throw new ArgumentNullException(nameof(request));

			if (assertion == null)
				throw new ArgumentNullException(nameof(assertion));

			if (method == null)
				throw new ArgumentNullException(nameof(method));

			using (HttpRequestMessage requestMessage = request.BuildRequestMessage(method, context, bodyContent, baseUri))
			{
				assertion(requestMessage);
			}
		}

		/// <summary>
		///		Make assertions about the <see cref="HttpRequestMessage"/> generated by the <see cref="HttpRequest{TContext}"/>.
		/// </summary>
		/// <typeparam name="TContext">
		///		The type of object used as a context for resolving deferred parameters.
		/// </typeparam>
		/// <param name="request">
		///		The <see cref="HttpRequest{TContext}"/>.
		/// </param>
		/// <param name="method">
		///		The HTTP method (e.g. GET / POST / PUT).
		/// </param>
		/// <param name="context">
		///		The <typeparamref name="TContext"/> instance used as a context for resolving deferred values.
		/// </param>
		/// <param name="bodyContent">
		///		<see cref="HttpContent"/> representing the request body content.
		/// </param>
		/// <param name="baseUri">
		///		An optional base URI for the request.
		/// </param>
		/// <param name="asyncAssertion">
		///		An asynchronous delegate that makes assertions about the <see cref="HttpRequestMessage"/>.
		/// </param>
		public static async Task RequestAsync<TContext>(HttpRequest<TContext> request, HttpMethod method, TContext context, HttpContent bodyContent, Uri baseUri, Func<HttpRequestMessage, Task> asyncAssertion)
		{
			if (request == null)
				throw new ArgumentNullException(nameof(request));

			if (asyncAssertion == null)
				throw new ArgumentNullException(nameof(asyncAssertion));

			if (method == null)
				throw new ArgumentNullException(nameof(method));

			using (HttpRequestMessage requestMessage = request.BuildRequestMessage(method, context, bodyContent, baseUri))
			{
				await asyncAssertion(requestMessage);
			}
		}
	}
}
